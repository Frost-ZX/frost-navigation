import{f as M,a as S,b as O}from"./FormItem-DCbrlobA.js";import{c as I,a as P,d as _,f as k,i as B,u as j,m as F,T as x,l as L,at as v}from"./index-BKvL4bCX.js";const R=I("form",[P("inline","\n width: 100%;\n display: inline-flex;\n align-items: flex-start;\n align-content: space-around;\n ",[I("form-item",{width:"auto",marginRight:"18px"},[_("&:last-child",{marginRight:0})])])]);var V=function(t,m,i,o){function h(s){return s instanceof i?s:new i(function(f){f(s)})}return new(i||(i=Promise))(function(s,f){function y(n){try{e(o.next(n))}catch(l){f(l)}}function r(n){try{e(o.throw(n))}catch(l){f(l)}}function e(n){n.done?s(n.value):h(n.value).then(y,r)}e((o=o.apply(t,m||[])).next())})};const E=Object.assign(Object.assign({},j.props),{inline:Boolean,labelWidth:[Number,String],labelAlign:String,labelPlacement:{type:String,default:"top"},model:{type:Object,default:()=>{}},rules:Object,disabled:Boolean,size:String,showRequireMark:{type:Boolean,default:void 0},requireMarkPlacement:String,showFeedback:{type:Boolean,default:!0},onSubmit:{type:Function,default:t=>{t.preventDefault()}},showLabel:{type:Boolean,default:void 0},validateMessages:Object}),$=k({name:"Form",props:E,setup(t){const{mergedClsPrefixRef:m}=B(t);j("Form","-form",R,M,t,m);const i={},o=F(void 0),h=r=>{const e=o.value;(e===void 0||r>=e)&&(o.value=r)};function s(r){return V(this,arguments,void 0,function*(e,n=()=>!0){return yield new Promise((l,C)=>{const w=[];for(const u of v(i)){const g=i[u];for(const a of g)a.path&&w.push(a.internalValidate(null,n))}Promise.all(w).then(u=>{const g=u.some(d=>!d.valid),a=[],c=[];u.forEach(d=>{var p,b;!((p=d.errors)===null||p===void 0)&&p.length&&a.push(d.errors),!((b=d.warnings)===null||b===void 0)&&b.length&&c.push(d.warnings)}),e&&e(a.length?a:void 0,{warnings:c.length?c:void 0}),g?C(a.length?a:void 0):l({warnings:c.length?c:void 0})})})})}function f(){for(const r of v(i)){const e=i[r];for(const n of e)n.restoreValidation()}}return x(S,{props:t,maxChildLabelWidthRef:o,deriveMaxChildLabelWidth:h}),x(O,{formItems:i}),Object.assign({validate:s,restoreValidation:f},{mergedClsPrefix:m})},render(){const{mergedClsPrefix:t}=this;return L("form",{class:["".concat(t,"-form"),this.inline&&"".concat(t,"-form--inline")],onSubmit:this.onSubmit},this.$slots)}});export{$ as N};
